## Linear Optimization with Weighted Dissatisfaction Values ##

# Use the preference_matrix directly as the dissatisfaction_values
dissatisfaction_values <- preference_matrix


# Convert dissatisfaction values to a vector for the objective function
objective_coeffs_dissatisfaction <- as.vector(dissatisfaction_values)


# Extend LP model to include slack variables
lp_model_dissatisfaction <- make.lp(0, num_doctors * num_terms + num_doctors)

# SLACK VARIABLE TRIAL
slack_penalty <- max(dissatisfaction_values) * 10
slack_coefficients <- rep(slack_penalty, num_doctors)
objective_coeffs_extended <- c(objective_coeffs_dissatisfaction, slack_coefficients)

# Set binary decision variables (0 or 1)
set.type(lp_model_dissatisfaction, columns = 1:(num_doctors * num_terms), type = "binary")

# Set the objective function coefficients for minimizing dissatisfaction
set.objfn(lp_model_dissatisfaction, objective_coeffs_extended)



## NEXT STEP TO RUN A LOOP TO ASSIGN 5 TERMS ACROSS THE YEAR BASED ON PREFERENCES ##

# Number of times to run the assignment
num_assignments <- 5

# Initialize a list to store the results of each assignment
assignment_results <- list()

# Create a list to store unassigned terms for each assignment iteration
unassigned_terms_list <- list()

# This matrix will have rows corresponding to doctors and columns corresponding to terms.
# An entry of 1 in the matrix indicates that the doctor (row) has been assigned the term (column).
assigned_terms_matrix <- matrix(0, nrow = num_doctors, ncol = num_terms)

# Loop through the assignments
for (assignment_num in 1:num_assignments) {
  # Create an empty LP model for minimizing dissatisfaction
lp_model_dissatisfaction <- make.lp(0, num_doctors * num_terms + num_doctors)
  
  # Set binary decision variables (0 or 1)
  set.type(lp_model_dissatisfaction, columns = 1:(num_doctors * num_terms), type = "binary")
  
  # Set the objective function coefficients for minimizing dissatisfaction
  set.objfn(lp_model_dissatisfaction, objective_coeffs_extended)
  
  # Add constraints to ensure one assignment per doctor
for (i in 1:num_doctors) {
    constr_one_assignment <- rep(0, num_doctors * num_terms + num_doctors)
    constr_one_assignment[((i - 1) * num_terms + 1):(i * num_terms)] <- 1
    add.constraint(lp_model_dissatisfaction, constr_one_assignment, type = "=", rhs = 1)
}

  # Add constraint for top 10 terms for each doctor (MODIFIED TO ADD SLACK)
margin = -5
for (i in 1:num_doctors) {
    top_10_terms_for_doctor <- order(preference_matrix[i,])[1:(10+margin)]
    constr_top_10 <- rep(0, num_doctors * num_terms + num_doctors)
    for (j in top_10_terms_for_doctor) {
        constr_top_10[(i - 1) * num_terms + j] <- 1
    }
    constr_top_10[num_doctors * num_terms + i] <- -margin
    add.constraint(lp_model_dissatisfaction, constr_top_10, type = ">=", rhs = 1)
}
    
# 1. Max doctors per term constraint:

# Helper function to retrieve the correct 'max doctors' vector for a given term
   get_max_doctors_for_term <- function(term) {
     switch(term,
            "1" = max_doctors_per_term1,
            "2" = max_doctors_per_term2,
            "3" = max_doctors_per_term3,
            "4" = max_doctors_per_term4,
            "5" = max_doctors_per_term5)
   }


for (j in 1:num_terms) {
  constr_max_doctors_per_term <- rep(0, num_doctors * num_terms + num_doctors)
  
  indices <- j + seq(0, (num_doctors - 1) * num_terms, by = num_terms)
  constr_max_doctors_per_term[indices] <- 1
  
  max_doctors_for_this_term <- get_max_doctors_for_term(assignment_num)
  add.constraint(lp_model_dissatisfaction, constr_max_doctors_per_term, type = "<=", rhs = max_doctors_for_this_term[j])
}

# 2. Constraint to prevent reassignment to same term:
for (i in 1:num_doctors) {
  for (j in 1:num_terms) {
    if (assigned_terms_matrix[i, j] == 1) {
      constraint_already_assigned <- rep(0, num_doctors * num_terms + num_doctors)
      constraint_already_assigned[(i - 1) * num_terms + j] <- 1
      add.constraint(lp_model_dissatisfaction, constraint_already_assigned, type = "=", rhs = 0)
    }
  }
}

# # 3. Specialty Status Constraint:
# unique_specialty_statuses <- unique(specialty_status_per_term[!is.na(specialty_status_per_term)])
# for (specialty in unique_specialty_statuses) {
#    for (i in 1:num_doctors) {
#      constr_specialty <- rep(0, num_doctors * num_terms + num_doctors)
#      for (j in which(specialty_status_per_term == specialty)) {
#        constr_specialty[(i - 1) * num_terms + j] <- 1
#      }
#      add.constraint(lp_model_dissatisfaction, constr_specialty, type = "<=", rhs = 2)
#    }
# }
# 
# # 4. Sub-Specialty Status Constraint:
# unique_sub_specialties <- unique(sub_specialty_status_per_term[!is.na(sub_specialty_status_per_term)])
# for (sub_specialty in unique_sub_specialties) {
#   for (i in 1:num_doctors) {
#     constr_sub_specialty <- rep(0, num_doctors * num_terms + num_doctors)
#     for (j in which(sub_specialty_status_per_term == sub_specialty)) {
#       constr_sub_specialty[(i - 1) * num_terms + j] <- 1
#     }
#     add.constraint(lp_model_dissatisfaction, constr_sub_specialty, type = "<=", rhs = 1)
#   }
# }
  
#  # Constraint for >50% in team based 
  
  
  # Solve the linear programming problem to minimize dissatisfaction
  lp_result_dissatisfaction <- solve(lp_model_dissatisfaction)
  
  # Check if the LP problem was solved successfully
  if (lp_result_dissatisfaction == 0) {
    optimal_solution_dissatisfaction <- get.variables(lp_model_dissatisfaction)
    assignment_results[[assignment_num]] <- optimal_solution_dissatisfaction
    
    # Update the assigned_terms_matrix based on this solution
    for (i in 1:num_doctors) {
      for (j in 1:num_terms) {
        if (optimal_solution_dissatisfaction[(i - 1) * num_terms + j] == 1) {
          assigned_terms_matrix[i, j] <- 1
        }
      }
    }
  } else {
    cat("LP problem could not be solved for assignment", assignment_num, "Result:", lp_result_dissatisfaction, "\n")
  }
}


# Print the results of each assignment
for (assignment_num in 1:num_assignments) {
  cat("Assignment", assignment_num, "results:\n")
  optimal_solution_dissatisfaction <- assignment_results[[assignment_num]]
  for (i in 1:num_doctors) {
    for (j in 1:num_terms) {
      if (optimal_solution_dissatisfaction[(i - 1) * num_terms + j] == 1) {
        doctor_name <- row_names[i]
        term_name <- column_names[j]
        cat("Doctor", doctor_name, "is assigned to Term", term_name, "\n")
      }
    }
  }
  cat("\n")
}
# Initialize a data frame to store the results
assignment_table <- data.frame(Doctor = row_names, 
                               Assignment1 = character(num_doctors), 
                               Assignment2 = character(num_doctors),
                               Assignment3 = character(num_doctors),
                               Assignment4 = character(num_doctors),
                               Assignment5 = character(num_doctors),
                               stringsAsFactors = FALSE)

# Populate the data frame with the assignment results
for (assignment_num in 1:num_assignments) {
  optimal_solution_dissatisfaction <- assignment_results[[assignment_num]]
  for (i in 1:num_doctors) {
    for (j in 1:num_terms) {
      if (optimal_solution_dissatisfaction[(i - 1) * num_terms + j] == 1) {
        term_name <- column_names[j]
        assignment_column <- paste0("Assignment", assignment_num)
        assignment_table[i, assignment_column] <- term_name
      }
    }
  }
}


# Print the table using gt
gt(assignment_table)